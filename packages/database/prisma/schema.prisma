// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              String            @id @default(uuid())
  username        String            @unique
  name            String
  email           String            @unique
  mobile          String?           @unique
  dob             DateTime
  password        String?
  image           String?
  bio             String?
  isVerified      Boolean           @default(false)
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  interests       User_Interests[]
  posts           Post[]
  postLikes       Post_Like[]
  postDislikes    Post_Dislike[]
  commentLikes    Comment_Like[]
  commentDislikes Comment_Dislike[]
  views           Views[]
  comment         Comments[]
  sender          Notification[]    @relation("NotificationSender")
  receiver        Notification[]    @relation("NotificationReceiver")
  senderFriend    Friends[]         @relation("sender")
  receiverFriend  Friends[]         @relation("receiver")
  follower        Follower[]        @relation("follower")
  following       Follower[]        @relation("following")
  token           Token?
  otp             Otp[]
}

model Token {
  id        String   @id @default(uuid())
  token     String
  userId    String   @unique
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  expiresAt DateTime
}

model Otp {
  id        String   @id @default(uuid())
  otp       String
  userId    String   @unique
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  expiresAt DateTime
  type      Otp_Type

  @@unique([type, userId])
}

enum Otp_Type {
  Login
  ForgotPassword
  VerifyEmail
  VerifyMobile
}

model User_Interests {
  id        String   @id @default(uuid())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  interest  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Post {
  id            String         @id @default(uuid())
  content       String
  user          User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  media         Media[]
  likes         Post_Like[]
  dislikes      Post_Dislike[]
  views         Views[]
  comments      Comments[]
  userId        String
  notifications Notification[]
  tags          Post_Tags[]
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
}

model Media {
  id        String   @id @default(uuid())
  url       String
  type      String
  postId    String
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Post_Tags {
  id        String   @id @default(uuid())
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId    String
  tag       String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Post_Like {
  id        String   @id @default(uuid())
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Post_Dislike {
  id        String   @id @default(uuid())
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Views {
  id        String   @id @default(uuid())
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Comments {
  id            String            @id @default(uuid())
  post          Post              @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId        String
  user          User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId        String
  content       String
  isEdited      Boolean           @default(false)
  likes         Comment_Like[]
  dislikes      Comment_Dislike[]
  notifications Notification[]
  parent        Comments?         @relation("CommentToComment", fields: [parentId], references: [id], onDelete: Cascade)
  parentId      String?
  children      Comments[]        @relation("CommentToComment")
  createdAt     DateTime          @default(now())
  updatedAt     DateTime          @updatedAt
}

model Comment_Like {
  id        String   @id @default(uuid())
  comment   Comments @relation(fields: [commentId], references: [id], onDelete: Cascade)
  commentId String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Comment_Dislike {
  id        String   @id @default(uuid())
  comment   Comments @relation(fields: [commentId], references: [id], onDelete: Cascade)
  commentId String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Notification {
  id         String            @id @default(uuid())
  sender     User              @relation(name: "NotificationSender", fields: [senderId], references: [id], onDelete: Cascade)
  senderId   String
  receiver   User              @relation(name: "NotificationReceiver", fields: [receiverId], references: [id], onDelete: Cascade)
  postId     String?
  post       Post?             @relation(fields: [postId], references: [id], onDelete: Cascade)
  commentId  String?
  comment    Comments?         @relation(fields: [commentId], references: [id], onDelete: Cascade)
  receiverId String
  type       Notification_Type
  content    String
  isRead     Boolean           @default(false)
  createdAt  DateTime          @default(now())
  updatedAt  DateTime          @updatedAt
}

enum Notification_Type {
  Post
  Reply
  Comment
  Like
  Dislike
  Follow
  Unfollow
  Mention
}

model Friends {
  id         String        @id @default(uuid())
  senderId   String
  receiverId String
  status     Friend_Status @default(Pending)
  sender     User          @relation(name: "sender", fields: [senderId], references: [id], onDelete: Cascade)
  receiver   User          @relation(name: "receiver", fields: [receiverId], references: [id], onDelete: Cascade)
  createdAt  DateTime      @default(now())
  updatedAt  DateTime      @updatedAt

  @@unique([senderId, receiverId])
}

enum Friend_Status {
  Pending
  Accepted
  Rejected
  Blocked
}

model Follower {
  id          String   @id @default(uuid())
  followerId  String
  followingId String
  follower    User     @relation(name: "follower", fields: [followerId], references: [id], onDelete: Cascade)
  following   User     @relation(name: "following", fields: [followingId], references: [id], onDelete: Cascade)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@unique([followerId, followingId])
}
